function [M,S] = sfm(D)
%% SVD to D matrix
[U,W,V] = svd(D);
%% First column from U, first element of W, first row of V
U3 = U(:,1:3);
W3 = W(1:3,1:3);
V3 = V(:,1:3)';
%% Obtain matrix Motion and Shape
M = U3 * sqrt(W3);
S = sqrt(W3) * V3;





%Eliminating affine ambiguity by enforcing euclidean constrains
%Computing the G and c matrices according to section 2.3 of Morita and Kanade (1997)
%http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=00608289
G = [gT(M(1:2:end, :), M(1:2:end, :));...
     gT(M(2:2:end, :), M(2:2:end, :));...
     gT(M(1:2:end, :), M(2:2:end, :))];
c = [ones(size(M,1),1); zeros(size(M,1)/2,1)];

% %Solving the system of 3m equations
l = G\c;

%Reshaping to get conventional L matrix
L = [l(1:3)'; l(2), l(4), l(5); l(3), l(5), l(6)];
    
%Performing cholesky decomposition to find C
C = chol(L,'lower');

%Updating M and S
M = M*C;
S = C\S;
%Function to compute rows of the G matrix according to section 2.3 of Morita and Kanade (1997)




end